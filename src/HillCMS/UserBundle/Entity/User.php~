<?php
namespace HillCMS\UserBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\AdvancedUserInterface;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * HillCMS\UserBundle\Entity\User
 *
 * @ORM\Table(name="users")
 * @ORM\Entity(repositoryClass="HillCMS\UserBundle\Entity\UserRepository")
 */


class User implements AdvancedUserInterface, \Serializable
{
	/**
	 * @ORM\Column(type="integer")
	 * @ORM\Id
	 * @ORM\GeneratedValue(strategy="AUTO")
	 */
	private $id;

	/**
	 * @ORM\Column(type="string", length=25, unique=true)
	 */
	private $username;

	/**
	 * @ORM\Column(type="string", length=32)
	 */
	private $salt;

	/**
	 * @ORM\Column(type="string", length=40)
	 */
	private $password;

	/**
	 * @ORM\Column(type="string", length=60, unique=true)
	 */
	private $email;

	/**
	 * @ORM\Column(name="is_active", type="boolean")
	 */
	private $isActive;
	/**
	 * @ORM\ManyToMany(targetEntity="Role", inversedBy="users")
	 */
	private $roles;
	

	public function __construct()
	{
		$this->isActive = true;
		$this->salt = sha1(uniqid(null, true));
		$this->roles = new ArrayCollection();
	}	
	
	public function getRoles()
	{
		return $this->roles->toArray();
	}
	
	
	public function isAccountNonExpired(){
		return TRUE;
	}
	
	public function isAccountNonLocked(){
		return TRUE;
	}
	
	public function isCredentialsNonExpired(){
		return TRUE;
	}
	
	public function isEnabled(){
		return $this->isActive;
	}

	/**
	 * @inheritDoc
	 */
	public function getUsername()
	{
		return $this->username;
	}

	/**
	 * @inheritDoc
	 */
	public function getSalt()
	{
		return $this->salt;
	}

	/**
	 * @inheritDoc
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * @inheritDoc
	 */
	public function eraseCredentials()
	{
	}

	/**
	 * @see \Serializable::serialize()
	 */
	public function serialize()
	{
		return serialize(array(
				$this->id,
		));
	}

	/**
	 * @see \Serializable::unserialize()
	 */
	public function unserialize($serialized)
	{
		list (
				$this->id,
		) = unserialize($serialized);
	}

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set username
     *
     * @param string $username
     * @return User
     */
    public function setUsername($username)
    {
        $this->username = $username;
    
        return $this;
    }

    /**
     * Set salt
     *
     * @param string $salt
     * @return User
     */
    public function setSalt($salt)
    {
        $this->salt = $salt;
    
        return $this;
    }

    /**
     * Set password
     *
     * @param string $password
     * @return User
     */
    public function setPassword($password)
    {
        $this->password = $this->obscure($password);
    
        return $this;
    }

    /**
     * Set email
     *
     * @param string $email
     * @return User
     */
    public function setEmail($email)
    {
        $this->email = $email;
    
        return $this;
    }

    /**
     * Get email
     *
     * @return string 
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set isActive
     *
     * @param boolean $isActive
     * @return User
     */
    public function setIsActive($isActive)
    {
        $this->isActive = $isActive;
    
        return $this;
    }

    /**
     * Get isActive
     *
     * @return boolean 
     */
    public function getIsActive()
    {
        return $this->isActive;
    }
    /**
     * 
     * @param array $roles
     */
    public function setRoles($roles)
    {
    	$this->addRole($roles);
    	
    }
    

    /**
     * Add roles
     *
     * @param $role
     * @return User
     */
    public function addRole( $role)
    {
        
        	$this->roles[] = $role;
        
    }

    /**
     * Remove roles
     *
     * @param \HillCMS\UserBundle\Entity\Role $roles
     */
    public function removeRole(\HillCMS\UserBundle\Entity\Role $roles)
    {
        $this->roles->removeElement($roles);
    }
    /**
     * Builds password
     * @param unknown_type $password
     * @param unknown_type $algorythm
     * @return string
     */
    function obscure($password, $algorythm = "sha1")
    {
    	if ($this->salt == NULL)
    	{
    		$salt = hash($algorythm, uniqid(rand(), true));
    	} else{
    		$salt = $this->salt;
    	}
    	$hash_length = strlen($salt);
    	$password_length = strlen($password);
    	$password_max_length = $hash_length / 2;
    	if ($password_length >= $password_max_length)
    	{
    		$salt = substr($salt, 0, $password_max_length);
    	}
    	else
    	{
    		$salt = substr($salt, 0, $password_length);
    	}
    	$salt_length = strlen($salt);
    	$salted_password = hash($algorythm, $salt . $password);
    	$used_chars = ($hash_length - $salt_length) * -1;
    	$final_result[0] = $salt . substr($salted_password, $used_chars);
    	$final_result[1] = $salt;
    	return $final_result;
    }
}